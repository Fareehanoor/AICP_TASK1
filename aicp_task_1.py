# -*- coding: utf-8 -*-
"""AICP_Task#1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15hP5Q40_Z5CeisS0A9rC_PW2ykUI-ca_
"""

class ComputerShop:
    # Define item categories and their options
    components = {
        "Case": [("A1", "Compact", 75.00), ("A2", "Tower", 150.00)],
        "RAM": [("B1", "8 GB", 79.99), ("B2", "16 GB", 149.99), ("B3", "32 GB", 299.99)],
        "HDD": [("C1", "1 TB HDD", 49.99), ("C2", "2 TB HDD", 89.99), ("C3", "4 TB HDD", 129.99)],
        "SSD": [("D1", "240 GB SSD", 59.99), ("D2", "480 GB SSD", 119.99)],
        "2nd HDD": [("E1", "1 TB HDD", 49.99), ("E2", "2 TB HDD", 89.99), ("E3", "4 TB HDD", 129.99)],
        "Optical Drive": [("F1", "DVD/Blu-Ray Player", 50.00), ("F2", "DVD/Blu-Ray Re-writer", 100.00)],
        "Operating System": [("G1", "Standard Version", 100.00), ("G2", "Professional Version", 175.00)]
    }

    def __init__(self):
        self.basic_components_price = 200.00
        self.chosen_items = []

    # Function to display item options and get user choice
    def get_user_choice(self, category_name, category_options):
        print(f"Choose one {category_name}:")
        for i, option in enumerate(category_options):
            print(f"{i + 1}. {option[1]} - ${option[2]:.2f}")

        choice = int(input(f"Enter the number of your choice (1-{len(category_options)}): ")) - 1
        return category_options[choice]

    # Function to calculate the total price of chosen items
    def calculate_total_price(self):
        total_price = self.basic_components_price + sum(item[2] for item in self.chosen_items)
        return total_price

    # Function to apply discounts based on the number of additional items
    def apply_discount(self, total_price, num_additional_items):
        if num_additional_items == 1:
            return total_price * 0.95
        elif num_additional_items >= 2:
            return total_price * 0.90
        else:
            return total_price

    def run(self):
        # Step 1: Choose one case, one RAM, and one HDD
        self.chosen_items.append(self.get_user_choice("Case", self.components["Case"]))
        self.chosen_items.append(self.get_user_choice("RAM", self.components["RAM"]))
        self.chosen_items.append(self.get_user_choice("HDD", self.components["HDD"]))

        # Step 2: Calculate the total price with basic components
        total_price = self.calculate_total_price()

        # Step 3: Allow the customer to add more items
        while True:
            choice = input("Do you want to purchase additional items? (Y/N): ").strip().upper()
            if choice == 'N':
                break

            print("Additional Items:")
            for category_name, category_options in self.components.items():
                if category_name not in ["Case", "RAM", "HDD"]:
                    chosen_item = self.get_user_choice(category_name, category_options)
                    self.chosen_items.append(chosen_item)
                    total_price = self.calculate_total_price()

        # Step 4: Apply discounts based on the number of additional items
        num_additional_items = len(self.chosen_items) - 3  # Excluding the basic components
        total_price = self.apply_discount(total_price, num_additional_items)

        # Step 5: Display the chosen items and the final price
        print("Chosen items:")
        for item in self.chosen_items:
            print(f"{item[1]} - ${item[2]:.2f}")
        print(f"Total Price: ${total_price:.2f}")

        # Step 6: Display the amount saved
        original_price = self.calculate_total_price()
        amount_saved = original_price - total_price
        print(f"Amount Saved: ${amount_saved:.2f}")


# Instantiate the ComputerShop class and run the program
computer_shop = ComputerShop()
computer_shop.run()